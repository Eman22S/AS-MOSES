/** AtomeseTypeCheckerUTest ---
 *
 * Copyright (C) 2019 OpenCog Foundation
 *
 * Author: Kiros Hailay
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/combo/type_checker/type_tree.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atomese/atom_types/atom_types.h>
#include <opencog/combo/converter/combo_atomese.h>

using namespace opencog;
using namespace opencog::combo;


class AtomeseTypeCheckerUTest : public CxxTest::TestSuite
{

public:

	void test_infer_atomese_type1()
	{
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		Handle p3 = createNode(PREDICATE_NODE, "$z");

		HandleSeq handleSeq1 = {p1, p2};
		Handle program1 = createLink(handleSeq1, AND_LINK);

		HandleSeq handleSeq2 = {program1, p3};
		Handle program = createLink(handleSeq2, OR_LINK);

		// infer atomese type tree
		auto result = infer_atomese_type(program);

		// expected output
		Handle b1 = createNode(TYPE_NODE, "BooleanNode");
		Handle b2 = createNode(TYPE_NODE, "BooleanNode");
		Handle b3 = createNode(TYPE_NODE, "BooleanNode");
		Handle b4 = createNode(TYPE_NODE, "BooleanNode");

		HandleSeq handleSeq4 = {b1, b2, b3};
		Handle listlink = createLink(handleSeq4, LIST_LINK);
		HandleSeq handleSeq5 = {listlink, b4};
		Handle expected = createLink(handleSeq5, ARROW_LINK);

		TS_ASSERT(content_eq(result, expected));
	}

	void test_infer_atomese_type2()
	{
		Handle c1 = createNode(SCHEMA_NODE, "$c1");
		Handle c2 = createNode(SCHEMA_NODE, "$c2");

		HandleSeq handleSeq = {c1, c2};
		Handle program = createLink(handleSeq, PLUS_LINK);

		// infer atomese type
		auto result = infer_atomese_type(program);


		// expected output
		Handle c3 = createNode(TYPE_NODE, "NumberNode");
		Handle c4 = createNode(TYPE_NODE, "NumberNode");
		Handle c5 = createNode(TYPE_NODE, "NumberNode");

		HandleSeq handleSeq2 = {c3, c4};
		Handle listlink = createLink(handleSeq2, LIST_LINK);
		HandleSeq handleSeq4 = {listlink, c5};
		Handle expected = createLink(handleSeq4, ARROW_LINK);

		TS_ASSERT(content_eq(result, expected));

	}
	void test_infer_atomese_type3(){
		Handle c1 = createNode(PREDICATE_NODE, "$1");
		Handle c2 = createNode(SCHEMA_NODE, "$2");
		Handle c3 = createNode(PREDICATE_NODE, "$3");
		Handle num_node = createNode(NUMBER_NODE, "0.0");

		HandleSeq plusseq = {c2, c2};
		Handle pluslink = createLink(plusseq, PLUS_LINK);
		HandleSeq seq1 = {pluslink, num_node};
		Handle zero_link = createLink(seq1, GREATER_THAN_LINK);
		HandleSeq seq2 = {zero_link, c1, c3};
		Handle program = createLink(seq2, AND_LINK);

		auto result = infer_atomese_type(program);

		Handle c4 = createNode(TYPE_NODE, "BooleanNode");
		Handle c5 = createNode(TYPE_NODE, "NumberNode");
		Handle c6 = createNode(TYPE_NODE, "BooleanNode");
		Handle out = createNode(TYPE_NODE, "BooleanNode");

		HandleSeq hseq1 = {c6, c4, c5};
		Handle pg = createLink(hseq1, LIST_LINK);
		HandleSeq hseq2 = {pg, out};
		Handle pg_expected = createLink(hseq2, ARROW_LINK);

		TS_ASSERT(content_eq(result ,pg_expected));
	}
	void test_infer_atomese_type4(){
		combo::combo_tree tr = combo::str2combo_tree("+($1 impulse($2) 4.0)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);

		Handle c3 = createNode(TYPE_NODE, "NumberNode");
		Handle c4 = createNode(TYPE_NODE, "BooleanNode");
		Handle c5 = createNode(TYPE_NODE, "NumberNode");
		HandleSeq handleseq= {c3, c4};
		Handle listlink = createLink(handleseq, LIST_LINK);
		HandleSeq handleSeq4 = {listlink, c5};
		Handle expected = createLink(handleSeq4, ARROW_LINK);

		TS_ASSERT(content_eq(result, expected));

	}
	void test_infer_atomese_types7(){
		combo::combo_tree tr = combo::str2combo_tree("0<($1)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);

		Handle c1 = createNode(TYPE_NODE, "NumberNode");
		Handle c2 = createNode(TYPE_NODE, "BooleanNode");
		HandleSeq handleseq = {c1};
		Handle listlink = createLink(handleseq, LIST_LINK);
		HandleSeq handleseq3 = {listlink,c2};
		Handle expected = createLink(handleseq3, ARROW_LINK);
		TS_ASSERT(content_eq(result, expected));

	}


	void test_gen_signature1(){
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		Handle p3 = createNode(PREDICATE_NODE, "$z");

		HandleSeq handleSeq1 = {p1, p2};
		Handle program1 = createLink(handleSeq1, AND_LINK);

		HandleSeq handleSeq2 = {program1, p3};
		Handle program = createLink(handleSeq2, OR_LINK);

		// infer atomese type tree
		auto result = infer_atomese_type(program);

		type_node_seq res = gen_signature(result);
		type_node_seq expected = {id::boolean_type, id::boolean_type, id::boolean_type, id::boolean_type};

		TS_ASSERT(res == expected);
	}

	void test_gen_signature2(){
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		HandleSeq handleSeq1 = {p1, p2};
		Handle program = createLink(handleSeq1, AND_LINK);
		auto result = infer_atomese_type(program);
		type_node_seq res = gen_signature(result);
		type_node_seq expected = {id::boolean_type, id::boolean_type, id::boolean_type};
		TS_ASSERT(res == expected);

	}

	void test_gen_signature3(){
		combo::combo_tree tr = combo::str2combo_tree("+(1 $2 $3)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);
		type_node_seq res = gen_signature(result);

		type_node_seq expected = {id::contin_type, id::contin_type, id::contin_type};
		TS_ASSERT(res == expected);

	}

	void test_gen_signature4(){
		combo::combo_tree tr = combo::str2combo_tree("/($2 $3)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);
		type_node_seq res = gen_signature(result);

		type_node_seq expected = {id::contin_type, id::contin_type, id::contin_type};
		TS_ASSERT(res == expected);
	}

	void test_gen_signature5(){
		combo::combo_tree tr = combo::str2combo_tree("+($1 impulse($2) 4.0)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);
		auto res = gen_signature(result);
		type_node_seq expected ={id::contin_type, id::boolean_type, id::contin_type};
		TS_ASSERT(res == expected);
	}

	void test_gen_signature6(){
		Handle c1 = createNode(PREDICATE_NODE, "$1");
		Handle c2 = createNode(SCHEMA_NODE, "$2");
		Handle c3 = createNode(PREDICATE_NODE, "$3");
		Handle num_node = createNode(NUMBER_NODE, "0.0");

		HandleSeq plusseq = {c2, c2};
		Handle pluslink = createLink(plusseq, PLUS_LINK);
		HandleSeq seq1 = {pluslink, num_node};
		Handle zero_link = createLink(seq1, GREATER_THAN_LINK);
		HandleSeq seq2 = {zero_link, c1, c3};
		Handle program = createLink(seq2, AND_LINK);

		auto result = infer_atomese_type(program);
		type_node_seq res = gen_signature(result);
		type_node_seq expected = {id::boolean_type, id::boolean_type, id::contin_type, id::boolean_type};
		TS_ASSERT(res == expected);
	}

	void test_gen_signature7(){
		combo::combo_tree tr = combo::str2combo_tree("0<($1)", {});
		combo::ComboToAtomese to_atomese;
		Handle program = to_atomese(tr);
		auto result = infer_atomese_type(program);
		type_node_seq res = gen_signature(result);
		type_node_seq expected = {id::contin_type, id::boolean_type};
		TS_ASSERT(res == expected);

	}


};
